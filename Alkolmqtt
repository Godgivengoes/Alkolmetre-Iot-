/*
  Basic ESP8266 MQTT example
  This sketch demonstrates the capabilities of the pubsub library in combination
  with the ESP8266 board/library.
  It connects to an MQTT server then:
  - publishes "hello world" to the topic "outTopic" every two seconds
  - subscribes to the topic "inTopic", printing out any messages
    it receives. NB - it assumes the received payloads are strings not binary
  - If the first character of the topic "inTopic" is an 1, switch ON the ESP Led,
    else switch it off
  It will reconnect to the server if the connection is lost using a blocking
  reconnect function. See the 'mqtt_reconnect_nonblocking' example for how to
  achieve the same result without blocking the main loop.
  To install the ESP8266 board, (using Arduino 1.6.4+):
  - Add the following 3rd party board manager under "File -> Preferences -> Additional Boards Manager URLs":
       http://arduino.esp8266.com/stable/package_esp8266com_index.json
  - Open the "Tools -> Board -> Board Manager" and click install for the ESP8266"
  - Select your ESP8266 in "Tools -> Board"
*/

#include <ESP8266WiFi.h>
#include <PubSubClient.h>
#include <SPI.h>
#include <Wire.h>
#include <ESP8266WiFi.h>
#include <ESP8266WebServer.h> ///kalsın
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#include <ESP8266HTTPClient.h>




#define SCREEN_WIDTH 128 // OLED display width, in pixels
#define SCREEN_HEIGHT 64
#define OLED_RESET -1
#define NUMFLAKES 10
#define XPOS 0
#define YPOS 1
#define DELTAY 2
#define LOGO16_GLCD_HEIGHT 16
#define LOGO16_GLCD_WIDTH  16
// Update these with values suitable for your network.



const char* ssid     = "Godgiven";
const char* password = "tanriverdi";
const char* mqtt_server = "172.20.10.3";

WiFiClient espClient;
PubSubClient client(espClient);
unsigned long lastMsg = 0;
#define MSG_BUFFER_SIZE  (50)
char msg[MSG_BUFFER_SIZE];


Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);

static const unsigned char PROGMEM logo16_glcd_bmp[] =
{ B00000000, B11000000,
  B00000001, B11000000,
  B00000001, B11000000,
  B00000011, B11100000,
  B11110011, B11100000,
  B11111110, B11111000,
  B01111110, B11111111,
  B00110011, B10011111,
  B00011111, B11111100,
  B00001101, B01110000,
  B00011011, B10100000,
  B00111111, B11100000,
  B00111111, B11110000,
  B01111100, B11110000,
  B01110000, B01110000,
  B00000000, B00110000
};

#if (SSD1306_LCDHEIGHT != 64)

#endif

const int AOUTpin = A0; //sensor baglandıgı pin
const int ledPin = 13;

int limit;
int deger;
float sensor_volt;
float RS_gas;
float R0;
float ratio;
float BAC;
int R2 = 2000;
String mesaj;


void alkololc() {
  Serial.println("bana request geldi.");
  
  deger = analogRead(AOUTpin);
 
  Serial.println("b1");
  if (deger < 300)
  {
    client.publish("alkol_oran", "Alkol Tespit Edilmedi!(250 den kucuk)");
    //server.send(200,"text/Plain","Alkol Tespit Edilmedi!(250 den kucuk)");
    Serial.println("bana request geldivfdvffvvfedfv.");
  }
  if (deger >= 300 && deger < 350)
  {
    client.publish("alkol_oran", "Alkol Tespit Edildi!(200-250)");
    //server.send(200,"text/plain","Alkol Tespit Edildi!(200-250)");
  }
  if (deger >= 350 && deger < 400)
  {
    client.publish("alkol_oran", "Sinirdan fazla alkol tespit edildi! Dikkat!(250-300)");     
    //server.send(200,"text/plain","Sinirdan fazla alkol tespit edildi! Dikkat!(250-300)");
  }
  if (deger >= 400 && deger < 450)
  {
     client.publish("alkol_oran", "Kardesim gel opucem!(300-400)");
    //server.send(200, "text/plain", "Kardesim gel opucem!(300-400)");
  }
  if (deger > 450)
  {
    client.publish("alkol_oran", "Sarhossun!(400 den buyuk)");
    //server.send(200, "text/plain", "Sarhossun!(400 den buyuk");
  }

}



void setup_wifi() {

  delay(10);
  // We start by connecting to a WiFi network
  Serial.println();
  Serial.print("Connecting to ");
  Serial.println(ssid);

  WiFi.mode(WIFI_STA);
  WiFi.begin(ssid, password);

  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }

  randomSeed(micros());

  Serial.println("");
  Serial.println("WiFi connected");
  Serial.println("IP address: ");
  Serial.println(WiFi.localIP());
}

void callback(char* topic, byte* payload, unsigned int length) {
  Serial.print("Message arrived [");
  Serial.print(topic);
  Serial.print("] ");
  for (int i = 0; i < length; i++) {
    Serial.print((char)payload[i]);
  }
  Serial.println();
  int hangisi = 0;
 /* if ((String)topic == "espLed")
  {
    if ((char)payload[0] == 'r')
      hangisi = kirmizi;
    else if ((char)payload[0] == 'g')
      hangisi = yesil;
    else if ((char)payload[0] == 'b')
      hangisi = mavi;
    Serial.println(payload[1]);

    if ((char)payload[1] == '1')
      digitalWrite(hangisi, HIGH);
    else
      digitalWrite(hangisi, LOW);
  }
*/



}

void reconnect() {
  // Loop until we're reconnected
  while (!client.connected()) {
    Serial.print("Attempting MQTT connection...");
    // Create a random client ID
    String clientId = "ESP8266Client-";
    clientId += String(random(0xffff), HEX);
    // Attempt to connect
    if (client.connect(clientId.c_str())) {
      Serial.println("connected");
      // Once connected, publish an announcement...
      client.publish("outTopic", "hello world");
      // ... and resubscribe
      client.subscribe("inTopic");
      client.subscribe("espLed");
    } else {
      Serial.print("failed, rc=");
      Serial.print(client.state());
      Serial.println(" try again in 5 seconds");
      // Wait 5 seconds before retrying
      delay(5000);
    }
  }
}

void setup() {
   
  Serial.begin(115200);
  setup_wifi();
  client.setServer(mqtt_server, 1883);
  client.setCallback(callback);


  display.begin(SSD1306_SWITCHCAPVCC, 0x3C);
  display.display();
  delay(2000);
  display.clearDisplay();

}

void loop() {

  if (!client.connected()) {
    reconnect();
  }
  client.loop();

  int sensorValue = analogRead(A0);
  sensor_volt = (float)sensorValue / 1024 * 5.0;
  RS_gas = ((5.0 * R2) / sensor_volt) - R2;
  R0 = 130000; // temiiz hava derecesi
  ratio = RS_gas / R0; // ratio = RS/R0
  double x = 0.4 * ratio;
  BAC = pow(x, -1.431); //BAC in mg/L (blood alchocol content / kandaki alkol miktarı)
  Serial.print("BAC = ");
  Serial.print(BAC * 0.0001); //cevrim to g/dL
  Serial.print(" g/DL\n\n");
  delay(1000);

  deger = analogRead(AOUTpin); //sensorun okunduğu AOUT pini
  Serial.println(deger);
  // lcd metin görüntüleme
  display.clearDisplay();
  display.setCursor(0, 0);
  display.setTextSize(2);
  display.setTextColor(WHITE);
  display.println(deger);

 alkololc();
  if (deger < 300)
  {
    Serial.println("Alkol tespit edilmedi.");
    display.println("Alkol Yok.");

  }
  if (deger >= 300 && deger < 350)
  {
    Serial.println("Alkol tespit edildi");
    display.println("Alkol Tespit Edildi.");

  }

  if (deger >= 350 && deger < 400)
  {
    Serial.println("Sinirdan fazla alkol tespit edildi! Dikkat! ");
    display.println("Cok icki! Dikkat");

  }
  if (deger >= 400 && deger < 450)
  {
    Serial.println("Kardesim gel opucem! :)");
    display.println("Icelim guzelleselim!");

  }
  if (deger > 450)
  {
    Serial.println("Sarhossun!");
    display.println("Sarhossun!");

  }
  display.display();
  delay (500);

 
  }
